// Generated by CoffeeScript 1.9.2
var Conditioner, DROP, Firewall, Latency, OFF, PassThrough, REJECT, Stalled, Throttle, Transform, WritableStreamBuffer, _, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Throttle = require('throttle');

ref = require('stream'), Transform = ref.Transform, PassThrough = ref.PassThrough;

WritableStreamBuffer = require('stream-buffers').WritableStreamBuffer;

_ = require('underscore');

exports.OFF = OFF = 0;

exports.DROP = DROP = 1;

exports.REJECT = REJECT = 2;

Stalled = (function(superClass) {
  extend(Stalled, superClass);

  function Stalled() {
    Stalled.__super__.constructor.call(this);
    this.buff = new WritableStreamBuffer;
    this.choke = false;
  }

  Stalled.prototype._transform = function(chunk, encoding, done) {
    if (this.choke) {
      this.buff.write(chunk);
    } else {
      this.push(chunk);
    }
    return done();
  };

  Stalled.prototype.enabled = function(choke) {
    this.choke = choke;
    if (!this.choke) {
      return this.push(this.buff.getContents());
    }
  };

  return Stalled;

})(Transform);

Latency = (function(superClass) {
  extend(Latency, superClass);

  function Latency(latency1) {
    this.latency = latency1;
    Latency.__super__.constructor.call(this);
  }

  Latency.prototype._transform = function(chunk, encoding, done) {
    return setTimeout((function(_this) {
      return function() {
        _this.push(chunk);
        return done();
      };
    })(this), this.latency);
  };

  return Latency;

})(Transform);

Firewall = (function(superClass) {
  extend(Firewall, superClass);

  function Firewall(options) {
    Firewall.__super__.constructor.call(this);
    this.mode = options.mode, this.sequence = options.sequence, this.conn = options.conn;
    if (this.disconnectAfter) {
      setTimeout((function(_this) {
        return function() {
          return _this.disconnected = true;
        };
      })(this), this.disconnectAfter);
    }
  }

  Firewall.prototype._transform = function(chunk, encoding, done) {
    var ref1;
    if (this.mode === OFF) {
      this.push(chunk);
      return done();
    } else {
      if (chunk.includes(this.sequence)) {
        switch (this.mode) {
          case DROP:
            return done();
          case REJECT:
            if ((ref1 = this.conn) != null) {
              if (typeof ref1.destroy === "function") {
                ref1.destroy();
              }
            }
            return done();
        }
      } else {
        this.push(chunk);
        return done();
      }
    }
  };

  return Firewall;

})(Transform);

Conditioner = (function(superClass) {
  extend(Conditioner, superClass);

  function Conditioner(options) {
    var firewall, latency, throttle;
    if (options == null) {
      options = {};
    }
    Conditioner.__super__.constructor.call(this);
    options = _.defaults(options, {
      latency: 50,
      bps: 100,
      firewall: {
        mode: OFF,
        sequence: "",
        conn: null
      }
    });
    firewall = new Firewall(options.firewall);
    throttle = new Throttle(options.bps);
    latency = new Latency(options.latency);
    this.stalled = new Stalled();
    this.on('pipe', function(source) {
      source.unpipe(this);
      source = source.pipe(firewall);
      source = source.pipe(throttle);
      source = source.pipe(latency);
      source = source.pipe(this.stalled);
      return this.transformStream = source;
    });
  }

  Conditioner.prototype.pipe = function(dest, options) {
    return this.transformStream.pipe(dest, options);
  };

  Conditioner.prototype.choke = function(state) {
    return this.stalled.enabled(state);
  };

  return Conditioner;

})(PassThrough);

exports.Conditioner = Conditioner;
